"use strict";var ApplicationConfiguration=function(){var applicationModuleName="timetable",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ngDraggable","ngTableToCsv","ncy-angular-breadcrumb","ngFileUpload","multi-select"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),"#"===window.location.href[window.location.href.length-1]&&window.location.href.length-window.location.origin.length===2&&(window.location.href=window.location.origin+"/#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("courses"),ApplicationConfiguration.registerModule("curriculums"),ApplicationConfiguration.registerModule("schools"),ApplicationConfiguration.registerModule("sections"),ApplicationConfiguration.registerModule("specs"),ApplicationConfiguration.registerModule("subjects"),ApplicationConfiguration.registerModule("teachers"),ApplicationConfiguration.registerModule("timetables"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html",ncyBreadcrumb:{label:"Home"}}).state("generateTimetable",{url:"/generate",templateUrl:"modules/core/views/generate.client.view.html",ncyBreadcrumb:{label:"Generate Timetable",parent:"home"}})}]),angular.module("core").controller("FooterController",["$scope","Version",function($scope,Version){$scope.version=Version.get()}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$http","Authentication","Version",function($scope,$http,Authentication,Version){$scope.authentication=Authentication,$scope.version=Version.get(),$scope.upload=function(){$http.post("/upload").success(function(){console.log("Upload posted successfully")}).error(function(){console.log("upload failed")})}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Version",["$resource",function($resource){return $resource("version")}]),angular.module("courses").run(["Menus",function(){}]),angular.module("courses").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCourses",{url:"/courses",templateUrl:"modules/courses/views/list-courses.client.view.html",ncyBreadcrumb:{label:"Courses",parent:"home"}}).state("createCourse",{url:"/courses/create",templateUrl:"modules/courses/views/create-course.client.view.html",ncyBreadcrumb:{label:"Add Course",parent:"listCourses"}}).state("viewCourse",{url:"/courses/:courseId",templateUrl:"modules/courses/views/view-course.client.view.html",ncyBreadcrumb:{label:"Course",parent:"listCourses"}}).state("editCourse",{url:"/courses/:courseId/edit",templateUrl:"modules/courses/views/edit-course.client.view.html",ncyBreadcrumb:{label:"Edit Course",parent:"viewCourse"}})}]),angular.module("courses").controller("CoursesController",["$scope","$stateParams","$location","Authentication","Courses",function($scope,$stateParams,$location,Authentication,Courses){$scope.authentication=Authentication,$scope.create=function(){var course=new Courses({studentSize:this.course.studentSize,minWorkingDaySize:this.course.minWorkingDaySize,lectureSize:this.course.lectureSize,code:this.course.code,courseID:this.course.courseID,_teacher:0});course.$save(function(response){$location.path("courses/"+response._id),$scope.course={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(course){if(course){course.$remove();for(var i in $scope.courses)$scope.courses[i]===course&&$scope.courses.splice(i,1)}else $scope.course.$remove(function(){$location.path("courses")})},$scope.update=function(){var course=$scope.course;course.$update(function(){$location.path("courses/"+course._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.courses=Courses.query()},$scope.findOne=function(){$scope.course=Courses.get({courseId:$stateParams.courseId})}}]),angular.module("courses").factory("Courses",["$resource",function($resource){return $resource("courses/:courseId",{courseId:"@_id"},{update:{method:"PUT"}})}]),angular.module("curriculums").run(["Menus",function(){}]),angular.module("curriculums").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCurriculums",{url:"/curriculums",templateUrl:"modules/curriculums/views/list-curriculums.client.view.html"}).state("createCurriculum",{url:"/curriculums/create",templateUrl:"modules/curriculums/views/create-curriculum.client.view.html"}).state("viewCurriculum",{url:"/curriculums/:curriculumId",templateUrl:"modules/curriculums/views/view-curriculum.client.view.html"}).state("editCurriculum",{url:"/curriculums/:curriculumId/edit",templateUrl:"modules/curriculums/views/edit-curriculum.client.view.html"})}]),angular.module("curriculums").controller("CurriculumsController",["$scope","$stateParams","$location","Authentication","Curriculums",function($scope,$stateParams,$location,Authentication,Curriculums){$scope.authentication=Authentication,$scope.create=function(){var curriculum=new Curriculums({name:this.name});curriculum.$save(function(response){$location.path("curriculums/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(curriculum){if(curriculum){curriculum.$remove();for(var i in $scope.curriculums)$scope.curriculums[i]===curriculum&&$scope.curriculums.splice(i,1)}else $scope.curriculum.$remove(function(){$location.path("curriculums")})},$scope.update=function(){var curriculum=$scope.curriculum;curriculum.$update(function(){$location.path("curriculums/"+curriculum._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.curriculums=Curriculums.query()},$scope.findOne=function(){$scope.curriculum=Curriculums.get({curriculumId:$stateParams.curriculumId})}}]),angular.module("curriculums").factory("Curriculums",["$resource",function($resource){return $resource("curriculums/:curriculumId",{curriculumId:"@_id"},{update:{method:"PUT"}})}]),angular.module("schools").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Schools","schools","dropdown","/schools(/create)?"),Menus.addSubMenuItem("topbar","schools","List Schools","schools"),Menus.addSubMenuItem("topbar","schools","New School","schools/create")}]),angular.module("schools").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSchools",{url:"/schools",templateUrl:"modules/schools/views/list-schools.client.view.html"}).state("createSchool",{url:"/schools/create",templateUrl:"modules/schools/views/create-school.client.view.html"}).state("viewSchool",{url:"/schools/:schoolId",templateUrl:"modules/schools/views/view-school.client.view.html"}).state("editSchool",{url:"/schools/:schoolId/edit",templateUrl:"modules/schools/views/edit-school.client.view.html"})}]),angular.module("schools").controller("SchoolsController",["$scope","$stateParams","$location","Authentication","Schools",function($scope,$stateParams,$location,Authentication,Schools){$scope.authentication=Authentication,$scope.create=function(){var school=new Schools({name:this.name,code:this.code});school.$save(function(response){$location.path("schools/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(school){if(school){school.$remove();for(var i in $scope.schools)$scope.schools[i]===school&&$scope.schools.splice(i,1)}else $scope.school.$remove(function(){$location.path("schools")})},$scope.update=function(){var school=$scope.school;school.$update(function(){$location.path("schools/"+school._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.schools=Schools.query()},$scope.findOne=function(){$scope.school=Schools.get({schoolId:$stateParams.schoolId})}}]),angular.module("schools").factory("Schools",["$resource",function($resource){return $resource("schools/:schoolId",{schoolId:"@_id"},{update:{method:"PUT"}})}]),angular.module("sections").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Sections","sections","dropdown","/sections(/create)?"),Menus.addSubMenuItem("topbar","sections","List Sections","sections"),Menus.addSubMenuItem("topbar","sections","New Section","sections/create")}]),angular.module("sections").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSections",{url:"/sections",templateUrl:"modules/sections/views/list-sections.client.view.html"}).state("createSection",{url:"/sections/create",templateUrl:"modules/sections/views/create-section.client.view.html"}).state("viewSection",{url:"/sections/:sectionId",templateUrl:"modules/sections/views/view-section.client.view.html"}).state("editSection",{url:"/sections/:sectionId/edit",templateUrl:"modules/sections/views/edit-section.client.view.html"})}]),angular.module("sections").controller("SectionsController",["$scope","$stateParams","$location","Authentication","Sections",function($scope,$stateParams,$location,Authentication,Sections){$scope.authentication=Authentication,$scope.create=function(){var section=new Sections({name:this.name});section.$save(function(response){$location.path("sections/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(section){if(section){section.$remove();for(var i in $scope.sections)$scope.sections[i]===section&&$scope.sections.splice(i,1)}else $scope.section.$remove(function(){$location.path("sections")})},$scope.update=function(){var section=$scope.section;section.$update(function(){$location.path("sections/"+section._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.sections=Sections.query()},$scope.findOne=function(){$scope.section=Sections.get({sectionId:$stateParams.sectionId})}}]),angular.module("sections").factory("Sections",["$resource",function($resource){return $resource("sections/:sectionId",{sectionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("specs").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Specs","specs","dropdown","/specs(/create)?"),Menus.addSubMenuItem("topbar","specs","List Specs","specs"),Menus.addSubMenuItem("topbar","specs","New Spec","specs/create")}]),angular.module("specs").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSpecs",{url:"/specs",templateUrl:"modules/specs/views/list-specs.client.view.html"}).state("createSpec",{url:"/specs/create",templateUrl:"modules/specs/views/create-spec.client.view.html"}).state("viewSpec",{url:"/specs/:specId",templateUrl:"modules/specs/views/view-spec.client.view.html"}).state("editSpec",{url:"/specs/:specId/edit",templateUrl:"modules/specs/views/edit-spec.client.view.html"}).state("addSectionsToSpec",{url:"/specs/:specId/addSections",templateUrl:"modules/specs/views/add-sections-to-spec.client.view.html"}).state("assignSubjectsToSections",{url:"/specs/:specId/assignSubjects",templateUrl:"modules/specs/views/assign-subjects-to-sections.client.view.html"}).state("assignTeachersToSubjects",{url:"/specs/:specId/assignTeachers",templateUrl:"/modules/specs/views/assign-teachers-to-subjects.client.view.html"}).state("reviewAndSubmit",{url:"/specs/:specId/reviewAndSubmit",templateUrl:"/modules/specs/views/review-and-submit-spec.client.view.html"})}]),angular.module("specs").controller("GenerateModalInstanceCtrl",["$scope","$modalInstance","$http","$interval","$timeout","specId",function($scope,$modalInstance,$http,$interval,$timeout,specId){function getHardConstraints(score){var re=/\d+/,hardConstraints=score.match(re);return null!==hardConstraints&&hardConstraints.length>=1?(console.log("Hard Constraints ="+hardConstraints[0]),parseInt(hardConstraints[0])):0}function parseSolutionFile(){$scope.state="Importing Solution to Database...",$http.get("/specs/"+$scope.specId+"/solutionFile").success(function(){console.log("Got and parsed solution"),$scope.state="Complete"}).error(function(){console.log("Error in picking solution"),$scope.state="Error. Please retry..."})}function getCurrentStatusAndScore(response){var tokenisedString=response.split(", ");if(2!==tokenisedString.length)console.log("Incorrect Response format. Unable to calculate progress"),$scope.state="Error";else{var stateString=tokenisedString[0],scoreString=tokenisedString[1];-1!==stateString.split(": ")[1].indexOf("true")?$scope.state="Solving":($scope.state="Solution complete. Waiting for solution...",$scope.disableStop=!0,$scope.progress=100,$interval.cancel($scope.progressPromise),$timeout(parseSolutionFile(),1e4)),$scope.solutionHealth=scoreString.split(": ")[1]}}function calculateProgress(newScore,currentProgress){var newHardConstraints=getHardConstraints(newScore);if(newHardConstraints>worstScore&&(worstScore=newHardConstraints),0!==worstScore&&worstScore>newScore){var newProgress=100-100/worstScore*currentProgress;return newProgress}return currentProgress+1}$scope.specId=specId,$scope.progress=0,$scope.state="Initializing",$scope.solutionHealth="Unavailable",$scope.disableStop=!1,console.log("SpecID for this modal is "+specId);var worstScore=0;$scope.checkProgress=function(){$http.get("/specs/"+$scope.specId+"/solution").success(function(data){console.log("Invoked isSolving successfully"),console.log("Data is "+data),getCurrentStatusAndScore(data),$scope.progress=calculateProgress($scope.solutionHealth,$scope.progress)}).error(function(){console.log("Error while getting solution status")})},$scope.progressPromise=$interval($scope.checkProgress,1e4),$scope.terminateSolving=function(){console.log("You want to solve? Are you sure?"),$http["delete"]("/specs/"+$scope.specId+"/solution").success(function(){console.log("Terminated Solving")}).error(function(){console.log("Error in termination")}),$interval.cancel($scope.progressPromise),$modalInstance.close()},$scope.dismiss=function(){$interval.cancel($scope.progressPromise),$modalInstance.close()}}]),angular.module("specs").controller("SpecsController",["$scope","$stateParams","$location","$http","Authentication","$modal","Specs","Upload","Sections","Subjects","Teachers",function($scope,$stateParams,$location,$http,Authentication,$modal,Specs,Upload,Sections,Subjects,Teachers){function isSubjectAssignedToSection(currentAssignments,subjectCode,section){for(var found=!1,i=0;i<currentAssignments.length;i++){var assignment=currentAssignments[i];if(assignment.subjectCode===subjectCode&&assignment.section===section){found=!0;break}}return found}function prepareSectionAssignmentsHolder(sections,currentAssignments){$scope.assignedSections=[],sections.forEach(function(section){var thisSection={};thisSection.name=section,thisSection.allSubjects=[],thisSection.selectedSubjects=[],$scope.allSubjects.forEach(function(subject){var subjectCopy={};angular.copy(subject,subjectCopy),isSubjectAssignedToSection(currentAssignments,subjectCopy.name,section)===!0&&(subjectCopy.ticked=!0,thisSection.selectedSubjects.push(subjectCopy)),thisSection.allSubjects.push(subjectCopy)}),$scope.assignedSections.push(thisSection)})}function getSectionsForSpec(){$http.get("/specs/"+$stateParams.specId+"/sections").success(function(data){var sections=data;console.log("received following sections: %j",sections),$http.get("/specs/"+$stateParams.specId+"/assignments").success(function(data){var currentAssignments=data;console.log("received following assignments: %j",currentAssignments),prepareSectionAssignmentsHolder(sections,currentAssignments)})}).error(function(data){$scope.error=data.message,$scope.assignedSections=[]})}$scope.authentication=Authentication,$scope.csvFileUploaded=!1,$scope.create=function(){var spec=new Specs;this.csvFileUploaded===!0?(spec.name=this.name,spec.specFile=this.specFileName,spec.origFile=this.fileOriginalName,spec.unsolvedXML=this.outputFileName,spec.state=this.uploadState):(spec.name=this.name,spec.specFile="",spec.origFile="",spec.unsolvedXML="",spec.state="Initialized. Data not defined yet."),spec.$save(function(response){$scope.csvFileUploaded===!0?($location.path("specs/"+response._id),$scope.name=""):$location.path("specs/"+response._id+"/addSections")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(spec){if(spec){spec.$remove();for(var i in $scope.specs)$scope.specs[i]===spec&&$scope.specs.splice(i,1)}else $scope.spec.$remove(function(){$location.path("specs")})},$scope.update=function(){var spec=$scope.spec;spec.$update(function(){$location.path($scope.csvFileUploaded===!0?"specs/"+spec._id:"specs/"+spec._id+"/addSections")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.specs=Specs.query()},$scope.findOne=function(){$scope.spec=Specs.get({specId:$stateParams.specId})},$scope.upload=function(files){if(files&&files.length){var file=files[0];console.log("file path "+file.path),Upload.upload({url:"specs/upload",fields:{},file:file}).progress(function(evt){var progressPercentage=parseInt(100*evt.loaded/evt.total);$scope.log="progress: "+progressPercentage+"% "+evt.config.file.name+"\n"+$scope.log}).success(function(data){$scope.specFileName=data.specFileName,$scope.fileOriginalName=data.fileOriginalName,$scope.outputFileName=data.outputFileName,$scope.uploadState=data.uploadState,$scope.csvFileUploaded=!0})}},$scope.generateTimetable=function(size){$http.post("/specs/solve",{specID:$stateParams.specId}).success(function(){console.log("Started solving");var modalInstance=$modal.open({animation:!0,templateUrl:"generate.timetable.modal.client.view.html",controller:"GenerateModalInstanceCtrl",size:size,resolve:{specId:function(){return $stateParams.specId}}});modalInstance.result.then(function(){},function(){console.info("Modal dismissed at: "+new Date)})}).error(function(){})},$scope.initSections=function(){$scope.allSections=[],$scope.selectedSections=[];var allSections=Sections.query(function(){allSections.forEach(function(section){$scope.allSections.push({name:section.name,ticked:!1}),allSections.length===$scope.allSections.length&&$http.get("/specs/"+$stateParams.specId+"/sections").success(function(data){console.log("received following sections: %j",data),$scope.allSections.forEach(function(section){-1!==data.indexOf(section.name)&&(section.ticked=!0)})}).error(function(data){$scope.error=data.message})})})},$scope.addSections=function(){var sections=[];$scope.selectedSections.forEach(function(selectedSection){sections.push(selectedSection.name),sections.length===$scope.selectedSections.length&&$http.post("/specs/"+$stateParams.specId+"/sections",{sections:sections}).success(function(){$location.path("specs/"+$stateParams.specId+"/assignSubjects")}).error(function(data){$scope.error=data.message})})},$scope.initSubjects=function(){$scope.allSubjects=[];var allSubjects=Subjects.query(function(){allSubjects.forEach(function(subject){$scope.allSubjects.push({name:subject.code,ticked:!1})}),getSectionsForSpec()});$scope.sectionsAccordionOneAtATime=!0,$scope.sectionsAccordionStatus={isFirstOpen:!0,isFirstDisabled:!1}},$scope.saveSubjectsAndProceed=function(){console.log("Subjects Assigned are: %j",$scope.assignedSections);for(var assignments=[],i=0;i<$scope.assignedSections.length;i++)for(var j=0;j<$scope.assignedSections[i].selectedSubjects.length;j++){var assignmentObject={};assignmentObject.section=$scope.assignedSections[i].name,assignmentObject.subjectCode=$scope.assignedSections[i].selectedSubjects[j].name,assignmentObject.teacherCode="",assignmentObject.numberOfClassesInAWeek=0,assignments.push(assignmentObject)}$http.put("/specs/"+$stateParams.specId+"/assignments",{assignments:assignments}).success(function(){$location.path("specs/"+$stateParams.specId+"/assignTeachers")}).error(function(data){$scope.error=data.message})},$scope.initAssignments=function(){$http.get("/specs/"+$stateParams.specId+"/assignments").success(function(data){console.log("received following assignments: %j",data),$scope.assignments=data}).error(function(data){$scope.error=data.message,$scope.assignments=[]}),$scope.allTeachers=[];var teachers=Teachers.query(function(){teachers.forEach(function(teacher){$scope.allTeachers.push(teacher.code)})})},$scope.assignTeachersAndProceed=function(){$http.post("/specs/"+$stateParams.specId+"/assignments",{assignments:$scope.assignments}).success(function(){$location.path("specs/"+$stateParams.specId+"/reviewAndSubmit")}).error(function(data){$scope.error=data.message})},$scope.submitSpec=function(){$http.post("/specs/"+$stateParams.specId+"/generate",{}).success(function(data){$scope.specFileName=data.specFileName,$scope.fileOriginalName=data.fileOriginalName,$scope.outputFileName=data.outputFileName,$scope.uploadState=data.uploadState,$scope.csvFileUploaded=!0,$location.path("specs/"+$stateParams.specId)}).error(function(data){$scope.error=data.message})},$scope.backTo=function(location){$location.path("/specs/"+$stateParams.specId+"/"+location)}}]),angular.module("specs").factory("Specs",["$resource",function($resource){return $resource("specs/:specId",{specId:"@_id"},{update:{method:"PUT"}})}]),angular.module("subjects").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Subjects","subjects","dropdown","/subjects(/create)?"),Menus.addSubMenuItem("topbar","subjects","List Subjects","subjects"),Menus.addSubMenuItem("topbar","subjects","New Subject","subjects/create")}]),angular.module("subjects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSubjects",{url:"/subjects",templateUrl:"modules/subjects/views/list-subjects.client.view.html"}).state("createSubject",{url:"/subjects/create",templateUrl:"modules/subjects/views/create-subject.client.view.html"}).state("viewSubject",{url:"/subjects/:subjectId",templateUrl:"modules/subjects/views/view-subject.client.view.html"}).state("editSubject",{url:"/subjects/:subjectId/edit",templateUrl:"modules/subjects/views/edit-subject.client.view.html"})}]),angular.module("subjects").controller("SubjectsController",["$scope","$stateParams","$location","Authentication","Subjects",function($scope,$stateParams,$location,Authentication,Subjects){$scope.authentication=Authentication,$scope.create=function(){var subject=new Subjects({name:this.name,code:this.code});subject.$save(function(response){$location.path("subjects/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(subject){if(subject){subject.$remove();for(var i in $scope.subjects)$scope.subjects[i]===subject&&$scope.subjects.splice(i,1)}else $scope.subject.$remove(function(){$location.path("subjects")})},$scope.update=function(){var subject=$scope.subject;subject.$update(function(){$location.path("subjects/"+subject._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.subjects=Subjects.query()},$scope.findOne=function(){$scope.subject=Subjects.get({subjectId:$stateParams.subjectId})}}]),angular.module("subjects").factory("Subjects",["$resource",function($resource){return $resource("subjects/:subjectId",{subjectId:"@_id"},{update:{method:"PUT"}})}]),angular.module("teachers").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Teachers","teachers","dropdown","/teachers(/create)?"),Menus.addSubMenuItem("topbar","teachers","List Teachers","teachers"),Menus.addSubMenuItem("topbar","teachers","New Teacher","teachers/create")}]),angular.module("teachers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTeachers",{url:"/teachers",templateUrl:"modules/teachers/views/list-teachers.client.view.html"}).state("createTeacher",{url:"/teachers/create",templateUrl:"modules/teachers/views/create-teacher.client.view.html"}).state("viewTeacher",{url:"/teachers/:teacherId",templateUrl:"modules/teachers/views/view-teacher.client.view.html"}).state("editTeacher",{url:"/teachers/:teacherId/edit",templateUrl:"modules/teachers/views/edit-teacher.client.view.html"})}]),angular.module("teachers").controller("TeachersController",["$scope","$stateParams","$location","Authentication","Teachers",function($scope,$stateParams,$location,Authentication,Teachers){$scope.authentication=Authentication,$scope.create=function(){var teacher=new Teachers({firstName:this.firstName,lastName:this.lastName,email:this.email,details:this.details,code:this.code});teacher.$save(function(response){$location.path("teachers/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(teacher){if(teacher){teacher.$remove();for(var i in $scope.teachers)$scope.teachers[i]===teacher&&$scope.teachers.splice(i,1)}else $scope.teacher.$remove(function(){$location.path("teachers")})},$scope.update=function(){var teacher=$scope.teacher;teacher.$update(function(){$location.path("teachers/"+teacher._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.teachers=Teachers.query()},$scope.findOne=function(){$scope.teacher=Teachers.get({teacherId:$stateParams.teacherId})}}]),angular.module("teachers").factory("Teachers",["$resource",function($resource){return $resource("teachers/:teacherId",{teacherId:"@_id"},{update:{method:"PUT"}})}]),angular.module("timetables").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Timetables","timetables","item","/timetables")}]),angular.module("timetables").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTimetables",{url:"/timetables",templateUrl:"modules/timetables/views/list-timetables.client.view.html",ncyBreadcrumb:{label:"Your Timetables",parent:"home"}}).state("displayTimetable",{url:"/timetables/:specId",templateUrl:"modules/timetables/views/display-timetable.client.view.html",ncyBreadcrumb:{label:"Timetable for Spec",parent:"listTimetables"}}).state("viewTimetable",{url:"/timetables/:specId/curriculum/:curriculumId",templateUrl:"modules/timetables/views/view-timetable.client.view.html",ncyBreadcrumb:{label:"Class Timetable",parent:"displayTimetable"}}).state("viewTeacherTimetable",{url:"/timetables/:specId/teacher/:id",templateUrl:"modules/timetables/views/view-teacher-timetable.client.view.html",ncyBreadcrumb:{label:"Teacher Timetable",parent:"displayTimetable"}}).state("viewDayTimetable",{url:"/timetables/:specId/day/:dayIndex",templateUrl:"modules/timetables/views/view-day-timetable.client.view.html",ncyBreadcrumb:{label:"Timetable for Day",parent:"displayTimetable"}}).state("editTimetable",{url:"/timetables/:specId/edit/:curriculumId",templateUrl:"modules/timetables/views/edit-timetable.client.view.html",ncyBreadcrumb:{label:"Edit Timetable",parent:"viewTimetable"}})}]),angular.module("timetables").controller("ModalInstanceCtrl",["$scope","$modalInstance","teachers","subjectCode",function($scope,$modalInstance,teachers,subjectCode){$scope.teachers=teachers,$scope.subjectCode=subjectCode,$scope.selectedTeacher={},$scope.newTeacher=!1,$scope.selectTeacher=function(teacher){$scope.newTeacher=!1,$scope.selectedTeacher=teacher},$scope.ok=function(){$modalInstance.close({selectedTeacher:$scope.selectedTeacher,isNew:$scope.newTeacher})},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.createNewTeacher=function(){$scope.newTeacher=!0,$scope.selectedTeacher={}}}]),angular.module("timetables").controller("DayTimetableController",["$http","$scope","$stateParams","$location","Authentication","Days","Teachers",function($http,$scope,$stateParams,$location,Authentication,Days,Teachers){function getAllTeachers(){var allTeachers=[];return $scope.teachers.forEach(function(teacher){allTeachers.push(teacher.code)}),allTeachers}function findAndRemoveFromArray(array,val){var index=array.indexOf(val);return index>-1?array.splice(index,1):array}function prepareUnassignedTeachersForPeriods(){if($scope.timetable.timetableForDay&&$scope.timetable.timetableForDay.length>0&&$scope.teachers&&$scope.teachers.length>0)for(var timetableForDay=$scope.timetable.timetableForDay,i=0;i<timetableForDay[0].days.periods.length;i++){
for(var unassignedTeachers=getAllTeachers(),j=0;j<timetableForDay.length;j++)findAndRemoveFromArray(unassignedTeachers,timetableForDay[j].days.periods[i].teacher);$scope.unassignedTeachersForPeriod.push(unassignedTeachers)}}$scope.authentication=Authentication,$scope.formatSubjectTeacher=function(subject,teacher){return subject&&teacher?subject+", "+teacher:""},$scope.unassignedTeachersForPeriod=[],$scope.formatUnassignedTeachers=function(period){return $scope.unassignedTeachersForPeriod[period].join(", ")},$scope.findOne=function(){$scope.specId=$stateParams.specId,$scope.timetable=Days.get({specId:$scope.specId,dayIndex:$stateParams.dayIndex}),$scope.teachers=Teachers.query({specId:$scope.specId})},$scope.$watch("timetable.timetableForDay.length > 0",prepareUnassignedTeachersForPeriods),$scope.$watch("teachers.length > 0",prepareUnassignedTeachersForPeriods)}]),angular.module("timetables").controller("TeacherTimetableController",["$http","$scope","$stateParams","$location","Authentication","Timetables","TimetableForTeacher","SpecIdHolder",function($http,$scope,$stateParams,$location,Authentication,Timetables,TimetableForTeacher,SpecIdHolder){$scope.authentication=Authentication,$scope.formatClassSubject=function(period){var allocationStr="";if(period.curriculum&&period.subject&&(allocationStr=period.curriculum+", "+period.subject),period.clash)for(var i=0;i<period.clashes.length;i++)allocationStr=allocationStr+", ["+period.clashes[i].clashInCurriculum+", "+period.clashes[i].clashInSubject+"]";return allocationStr},$scope.findOne=function(){$scope.specId=SpecIdHolder.getSpecId(),$scope.timetableForTeacher=TimetableForTeacher.get({specId:$scope.specId,id:$stateParams.id})}}]),angular.module("timetables").controller("TimetablesController",["$http","$scope","$filter","$stateParams","$location","$modal","Authentication","Timetables","Teachers","TimetableForCurriculum","SpecIdHolder",function($http,$scope,$filter,$stateParams,$location,$modal,Authentication,Timetables,Teachers,TimetableForCurriculum,SpecIdHolder){function extractPeriod(dayIndex,periodIndex){var dayIndexAsInt="number"==typeof dayIndex?dayIndex:parseInt(dayIndex,10),periodIndexAsInt="number"==typeof periodIndex?periodIndex:parseInt(periodIndex,10);return $scope.timetableForCurriculum.timetable.days[dayIndexAsInt].periods[periodIndexAsInt]}function assignBackgroundColorForSubjects(){var colors=["plum","orchid","coral","teal","bisque","peru","thistle","olive","pink","sienna","ivory","linen","orange","gold","purple","crimson"];$scope.backgroundColorForSubjects={};var index=0;$scope.timetableForCurriculum.courses.forEach(function(course){$scope.backgroundColorForSubjects[course.code]=colors[index],index++})}function extractClashes(dayIndex,periodIndex,curriculumReference){return $scope.clashes.filter(function(clash){return void 0!==curriculumReference?clash.days.dayIndex===dayIndex&&clash.days.periods.index===parseInt(periodIndex)&&clash.curriculumReference===curriculumReference:clash.days.dayIndex===dayIndex&&clash.days.periods.index===parseInt(periodIndex)})}function extractCourse(dayIndex,periodIndex){var period=extractPeriod(dayIndex,periodIndex);return $scope.timetableForCurriculum.courses.filter(function(course){return course._teacher.code===period.teacher&&course.code===period.subject})[0]}function popClashFromLocalList(dayIndex,periodIndex){var clashesToUpdate=[],currentPeriod=extractPeriod(dayIndex,periodIndex);return currentPeriod.clash&&(clashesToUpdate=extractClashes(dayIndex,periodIndex),clashesToUpdate.forEach(function(clashToUpdate){$scope.clashes.splice($scope.clashes.indexOf(clashToUpdate),1)})),console.log("clash to update is "+JSON.stringify(clashesToUpdate)),clashesToUpdate}function updateAllocation(dayIndex,periodIndex,allocatedCourse,currentClashes){$http.post("/timetables/"+$scope.specId+"/modifyPeriodAllocation",{currentDay:dayIndex,currentPeriod:extractPeriod(dayIndex,periodIndex),allocatedCourse:allocatedCourse,clashesToUpdate:currentClashes,specReference:$scope.specId}).success(function(data){var updatedPeriod=extractPeriod(dayIndex,periodIndex);data.clashIn.length>=1?(updatedPeriod.clash=!0,$scope.clashes=$scope.clashes.concat(data.clashIn)):updatedPeriod.clash=!1}).error(function(data){$scope.error=data.message})}function applyAllocation(allocation){var dayIndex=allocation.dayIndex,periodIndex=allocation.periodIndex,allocatedCourse={code:allocation.after.subject,_teacher:{code:allocation.after.teacher},curriculumReference:$stateParams.curriculumId},clashesToUpdate=popClashFromLocalList(dayIndex,periodIndex);clashesToUpdate.length>1&&(clashesToUpdate=[]),updateAllocation(dayIndex,periodIndex,allocatedCourse,clashesToUpdate);var period=extractPeriod(dayIndex,periodIndex);period.subject=allocation.after.subject,period.teacher=allocation.after.teacher,allocation.timestamp=Date.now(),$scope.history.unshift(allocation)}function createAndApplyAllocation(dayIndex,periodIndex,allocatedSubject,allocatedTeacher){var currentPeriod=extractPeriod(dayIndex,periodIndex);if(currentPeriod.subject!==allocatedSubject||currentPeriod.teacher!==allocatedTeacher){$scope.redoStack=[];var allocation={dayIndex:dayIndex,periodIndex:periodIndex,before:{subject:currentPeriod.subject,teacher:currentPeriod.teacher},after:{subject:allocatedSubject,teacher:allocatedTeacher}};$scope.undoStack.push(allocation),applyAllocation(allocation),$scope.selectedCourseForStats&&$scope.collectStats($scope.selectedCourseForStats)}}function extractClashesForTeacher(teacher){return $scope.clashes.filter(function(clash){return clash.days.periods.teacher===teacher})}function popAllClashesForTeacherFromLocalList(teacher){var clashesToUpdate=[];return clashesToUpdate=extractClashesForTeacher(teacher),clashesToUpdate.forEach(function(clash){$scope.clashes.splice($scope.clashes.indexOf(clash),1)}),console.log("clashes to update is "+JSON.stringify(clashesToUpdate)),clashesToUpdate}function updateTeacherForSubject(subjectCode,newTeacherID,newTeacherCode){var clashesToUpdate=popAllClashesForTeacherFromLocalList($scope.teacherCode);$http.post("/timetables/"+$scope.specId+"/changeTeacherAssignment",{teacherReference:newTeacherID,teacherCode:newTeacherCode,subjectCode:subjectCode,curriculumReference:$scope.timetableForCurriculum.timetable.curriculumReference,clashesToUpdate:clashesToUpdate}).success(function(){console.log("Teacher Changed successfully"),$scope.timetableForCurriculum=null,$scope.findOne(),$scope.stats=null}).error(function(){})}function createNewTeacherAndUpdateSubject(subjectCode,newTeacherCode){console.log("Inside CreateNewTeacherAndUpdateSubject");var teacher=new Teachers({teacherID:($scope.teachers.length+1).toString(),code:newTeacherCode});teacher.$save(function(response){console.log("Created teacher %j",response),updateTeacherForSubject(subjectCode,response.id,response.code)},function(errorResponse){$scope.error=errorResponse.data.message})}var SUBJECT_ROWS_PER_COLUMN=8;$scope.authentication=Authentication,$scope.clashes=[],$scope.history=[],$scope.undoStack=[],$scope.redoStack=[],$scope.subjectColumns=[],$scope.getBackgroundColorForSubject=function(subject){return $scope.backgroundColorForSubjects[subject]},$scope.$watch("timetableForCurriculum.courses",function(){if($scope.subjectColumns=[],$scope.timetableForCurriculum&&$scope.timetableForCurriculum.courses){$scope.columnCount=Math.ceil($scope.timetableForCurriculum.courses.length/SUBJECT_ROWS_PER_COLUMN);for(var i=0;i<$scope.timetableForCurriculum.courses.length;i+=SUBJECT_ROWS_PER_COLUMN){var column={start:i,end:Math.min(i+SUBJECT_ROWS_PER_COLUMN,$scope.timetableForCurriculum.courses.length)};$scope.subjectColumns.push(column)}assignBackgroundColorForSubjects()}}),$scope.list=function(){$scope.allTimetables=Timetables.query()},$scope.find=function(){$scope.specId=$stateParams.specId,SpecIdHolder.setSpecId($stateParams.specId),$scope.curriculums=Timetables.query({specId:$stateParams.specId}),$scope.teachers=Teachers.query({specId:$stateParams.specId}),$scope.workingDays=[{dayName:"Monday",dayIndex:0},{dayName:"Tuesday",dayIndex:1},{dayName:"Wednesday",dayIndex:2},{dayName:"Thursday",dayIndex:3},{dayName:"Friday",dayIndex:4}]},$scope.findOne=function(){$scope.timetableForCurriculum=TimetableForCurriculum.get({specId:$stateParams.specId,curriculumId:$stateParams.curriculumId}),$scope.specId=$stateParams.specId},$scope.formatAllocationHistory=function(allocation){var days={0:"Monday",1:"Tuesday",2:"Wednesday",3:"Thursday",4:"Friday",5:"Saturday",6:"Sunday"};return $filter("date")(allocation.timestamp,"short")+": Period "+(parseInt(allocation.periodIndex,10)+1)+" - "+days[allocation.dayIndex]+": Allocated "+allocation.after.subject+" ("+allocation.after.teacher+") in place of "+allocation.before.subject+" ("+allocation.before.teacher+")"},$scope.formatClash=function(clash){return clash.curriculumCode+", "+clash.days.periods.teacher+", "+clash.days.dayOfWeek+", Period-"+(clash.days.periods.index+1)},$scope.undo=function(){var allocation=$scope.undoStack.pop();$scope.redoStack.push(allocation);var allocationToUndo={dayIndex:allocation.dayIndex,periodIndex:allocation.periodIndex,before:{subject:allocation.after.subject,teacher:allocation.after.teacher},after:{subject:allocation.before.subject,teacher:allocation.before.teacher}};applyAllocation(allocationToUndo)},$scope.redo=function(){var allocationToRedo=$scope.redoStack.pop();$scope.undoStack.push(allocationToRedo),applyAllocation(allocationToRedo)},$scope.finish=function(){$scope.timetableForCurriculum.$update({curriculumId:$stateParams.curriculumId,clashes:$scope.clashes},function(){$location.path("timetables/"+$scope.specId+"/curriculum/"+$stateParams.curriculumId)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.onDropComplete=function(allocatedCourse,evt,dayIndex,periodIndex){var allocatedSubject=allocatedCourse.code,allocatedTeacher=allocatedCourse._teacher.code;createAndApplyAllocation(dayIndex,periodIndex,allocatedSubject,allocatedTeacher)},$scope.removeAllocation=function(dayIndex,periodIndex){var period=extractPeriod(dayIndex,periodIndex);$scope.unHighlight(period.clash,dayIndex,periodIndex),createAndApplyAllocation(dayIndex,periodIndex,"","")},$scope.findClashes=function(clash,dayIndex,periodIndex){clash===!0&&(console.log("clash for this element :"+clash),console.log("day for this element :"+dayIndex),console.log("period for this element :"+periodIndex),$http.post("/timetables/"+$stateParams.specId+"/discoverClashes",{currentDay:dayIndex,currentPeriod:extractPeriod(dayIndex,periodIndex),curriculumId:$stateParams.curriculumId,specId:$stateParams.specId}).success(function(data){data.clashIn.length>=1&&($scope.clashes=$scope.clashes.concat(data.clashIn))}).error(function(){}))},$scope.getClashLink=function(dayIndex,periodIndex,curriculumReference){var clashesInScope;return clashesInScope=void 0!==curriculumReference?extractClashes(dayIndex,periodIndex,curriculumReference):extractClashes(dayIndex,periodIndex),clashesInScope.length>0?"#!/timetables/"+$stateParams.specId+"/curriculum/"+clashesInScope[0].curriculumReference:void 0},$scope.hasHighlight=function(clash,dayIndex,periodIndex){if(clash){var clashInScope=extractClashes(dayIndex,periodIndex);return clashInScope.length>0?clashInScope.highlight:!1}},$scope.highlight=function(clash,dayIndex,periodIndex){var course=extractCourse(dayIndex,periodIndex);if(course&&(course.highlight=!0,clash)){var clashesInScope=extractClashes(dayIndex,periodIndex);clashesInScope.length>0&&(clashesInScope.forEach(function(clashInScope){clashInScope.highlight=!0}),course.clashHighlight=!0)}},$scope.unHighlight=function(clash,dayIndex,periodIndex){var course=extractCourse(dayIndex,periodIndex);if(course&&(course.highlight=!1,clash)){var clashesInScope=extractClashes(dayIndex,periodIndex);clashesInScope.length>0&&(clashesInScope.forEach(function(clashInScope){clashInScope.highlight=!1}),course.clashHighlight=!1)}},$scope.highlightPeriods=function(subject){$scope.timetableForCurriculum.timetable.days.forEach(function(day){day.periods.forEach(function(period){period.subject===subject&&(extractPeriod(day.dayIndex,period.index).highlightPeriod=!0)})})},$scope.unHighlightPeriods=function(){$scope.timetableForCurriculum.timetable.days.forEach(function(day){day.periods.forEach(function(period){extractPeriod(day.dayIndex,period.index).highlightPeriod=!1})})},$scope.collectStats=function(course){var subjectCode=course.code,teacherCode=course._teacher.code,subjectAllocationCount=0,teacherAllocationInClassCount=0;$scope.timetableForCurriculum.timetable.days.forEach(function(day){day.periods.forEach(function(period){period.subject===subjectCode&&subjectAllocationCount++,period.teacher===teacherCode&&teacherAllocationInClassCount++})}),$scope.stats={header:"Stats for "+teacherCode+" and "+subjectCode,data:[{name:"Periods in a week for "+teacherCode+" in this Class",value:teacherAllocationInClassCount},{name:"Number of "+subjectCode+" periods in a week for this Class",value:subjectAllocationCount},{name:"Total periods in a week for "+teacherCode,value:"-"}],teacherCode:teacherCode,subjectCode:subjectCode},$http.post("/timetables/"+$stateParams.specId+"/collectStats",{teacherCode:teacherCode}).success(function(data){$scope.stats.data[2].value=data.teacherStats.totalAllocation}).error(function(){}),$scope.selectedCourseForStats=course},$scope.displayTeacherAssignmentModal=function(course,size){$scope.subjectCode=course.code,$scope.teacherCode=course._teacher.code,$scope.teachers=Teachers.query(),$scope.selectedTeacher=null;var modalInstance=$modal.open({animation:!0,templateUrl:"modal.client.view.html",controller:"ModalInstanceCtrl",size:size,resolve:{teachers:function(){return $scope.teachers},subjectCode:function(){return $scope.subjectCode}}});modalInstance.result.then(function(result){console.log("newTeacher flag is %j",result.isNew),$scope.selectedTeacher=result.selectedTeacher,result.isNew!==!0?(console.info("The user has selected %j",$scope.selectedTeacher),$scope.selectedTeacher.code!==$scope.teacherCode&&updateTeacherForSubject($scope.subjectCode,$scope.selectedTeacher.id,$scope.selectedTeacher.code)):(console.info("The user wants to create a new teacher with code %j",$scope.selectedTeacher.code),createNewTeacherAndUpdateSubject($scope.subjectCode,$scope.selectedTeacher.code))},function(){console.info("Modal dismissed at: "+new Date)})}}]),angular.module("timetables").filter("slice",[function(){return function(arr,start,end){return arr.slice(start,end)}}]),angular.module("timetables").factory("Timetables",["$resource",function($resource){return $resource("timetables/:specId",{specId:"@specId"},{update:{method:"PUT"}})}]),angular.module("timetables").factory("TimetableForCurriculum",["$resource",function($resource){return $resource("timetables/:specId/curriculum/:curriculumId",{specId:"@specId",curriculumId:"@curriculumId"},{update:{method:"PUT"}})}]),angular.module("timetables").factory("TimetableForTeacher",["$resource",function($resource){return $resource("timetables/:specId/teacher/:id",{specId:"@specId",id:"@id"})}]),angular.module("timetables").factory("Days",["$resource",function($resource){return $resource("timetables/:specId/day/:dayIndex",{specId:"@specId",dayIndex:"@dayIndex"},{update:{method:"PUT"}})}]),angular.module("timetables").service("SpecIdHolder",function(){this.specId="",this.setSpecId=function(specIdInContext){this.specId=specIdInContext},this.getSpecId=function(){return this.specId}}),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);